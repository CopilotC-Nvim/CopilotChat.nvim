*CopilotChat.txt*          For NVIM v0.8.0         Last change: 2025 August 25

==============================================================================
Table of Contents                              *CopilotChat-table-of-contents*

1. Installation                                     |CopilotChat-installation|
  - Requirements                                    |CopilotChat-requirements|
  - Optional Dependencies                  |CopilotChat-optional-dependencies|
  - Integration with pickers            |CopilotChat-integration-with-pickers|
  - lazy.nvim                                          |CopilotChat-lazy.nvim|
  - vim-plug                                            |CopilotChat-vim-plug|
2. Core Concepts                                   |CopilotChat-core-concepts|
  - Examples                                            |CopilotChat-examples|
3. Usage                                                   |CopilotChat-usage|
  - Commands                                            |CopilotChat-commands|
  - Chat Key Mappings                          |CopilotChat-chat-key-mappings|
  - Predefined Functions                    |CopilotChat-predefined-functions|
  - Predefined Prompts                        |CopilotChat-predefined-prompts|
4. Configuration                                   |CopilotChat-configuration|
  - Quick Setup                                      |CopilotChat-quick-setup|
  - Window & Appearance                      |CopilotChat-window-&-appearance|
  - Buffer Behavior                              |CopilotChat-buffer-behavior|
  - Highlights                                        |CopilotChat-highlights|
  - Prompts                                              |CopilotChat-prompts|
  - Functions                                          |CopilotChat-functions|
  - Providers                                          |CopilotChat-providers|
5. API Reference                                   |CopilotChat-api-reference|
  - Core                                                    |CopilotChat-core|
  - Chat Window                                      |CopilotChat-chat-window|
  - Example Usage                                  |CopilotChat-example-usage|
6. Development                                       |CopilotChat-development|
  - Setup                                                  |CopilotChat-setup|
  - Contributing                                    |CopilotChat-contributing|
7. Contributors                                     |CopilotChat-contributors|
8. Stargazers                                         |CopilotChat-stargazers|
9. Links                                                   |CopilotChat-links|

CopilotChat.nvim brings GitHub Copilot Chat capabilities directly into Neovim
with a focus on transparency and user control.

- ü§ñ **Multiple AI Models** - GitHub Copilot (including GPT-4o, Gemini 2.5 Pro, Claude 4 Sonnet, Claude 3.7 Sonnet, Claude 3.5 Sonnet, o3-mini, o4-mini) + custom providers (Ollama, Mistral.ai). The exact list of available models depends on your GitHub Copilot settings <https://github.com/settings/copilot/features> and the models provided by GitHub‚Äôs API.
- üîß **Tool Calling** - LLM can use workspace functions (file reading, git operations, search) with your explicit approval
- üîí **Explicit Control** - Only shares what you specifically request - no background data collection
- üìù **Interactive Chat** - Rich UI with completion, diffs, and quickfix integration
- üéØ **Smart Prompts** - Composable templates and sticky prompts for consistent context
- ‚ö° **Efficient** - Smart token usage with tiktoken counting and history management
- üîå **Extensible** - Custom functions <https://github.com/CopilotC-Nvim/CopilotChat.nvim/discussions/categories/functions> and providers <https://github.com/CopilotC-Nvim/CopilotChat.nvim/discussions/categories/providers>, plus integrations like mcphub.nvim <https://github.com/ravitemer/mcphub.nvim>


==============================================================================
1. Installation                                     *CopilotChat-installation*


REQUIREMENTS                                        *CopilotChat-requirements*

- Neovim 0.10.0+ <https://neovim.io/>
- curl 8.0.0+ <https://curl.se/>
- Copilot chat in the IDE <https://github.com/settings/copilot> enabled in GitHub settings
- plenary.nvim <https://github.com/nvim-lua/plenary.nvim>


  [!WARNING] For Neovim < 0.11.0, add `noinsert` or `noselect` to your
  `completeopt` otherwise chat autocompletion will not work. For best
  autocompletion experience, also add `popup` to your `completeopt` (even on
  Neovim 0.11.0+).

OPTIONAL DEPENDENCIES                      *CopilotChat-optional-dependencies*

- tiktoken_core <https://github.com/gptlang/lua-tiktoken> - For accurate token counting
    - Arch Linux: Install `luajit-tiktoken-bin` <https://aur.archlinux.org/packages/luajit-tiktoken-bin> or `lua51-tiktoken-bin` <https://aur.archlinux.org/packages/lua51-tiktoken-bin> from AUR
    - Via luarocks: `sudo luarocks install --lua-version 5.1 tiktoken_core`
    - Manual: Download from lua-tiktoken releases <https://github.com/gptlang/lua-tiktoken/releases> and save as `tiktoken_core.so` in your Lua path
- git <https://git-scm.com/> - For git diff context features
- ripgrep <https://github.com/BurntSushi/ripgrep> - For improved search performance
- lynx <https://lynx.invisible-island.net/> - For improved URL context features


INTEGRATION WITH PICKERS                *CopilotChat-integration-with-pickers*

For various plugin pickers to work correctly, you need to replace
`vim.ui.select` with your desired picker (as the default `vim.ui.select` is
very basic). Here are some examples:

- fzf-lua <https://github.com/ibhagwan/fzf-lua?tab=readme-ov-file#neovim-api> - call `require('fzf-lua').register_ui_select()`
- telescope <https://github.com/nvim-telescope/telescope-ui-select.nvim?tab=readme-ov-file#telescope-setup-and-configuration> - setup `telescope-ui-select.nvim` plugin
- snacks.picker <https://github.com/folke/snacks.nvim/blob/main/docs/picker.md#%EF%B8%8F-config> - enable `ui_select` config
- mini.pick <https://github.com/echasnovski/mini.pick/blob/main/lua/mini/pick.lua#L1229> - set `vim.ui.select = require('mini.pick').ui_select`


LAZY.NVIM                                              *CopilotChat-lazy.nvim*

>lua
    return {
      {
        "CopilotC-Nvim/CopilotChat.nvim",
        dependencies = {
          { "nvim-lua/plenary.nvim", branch = "master" },
        },
        build = "make tiktoken",
        opts = {
          -- See Configuration section for options
        },
      },
    }
<


VIM-PLUG                                                *CopilotChat-vim-plug*

>vim
    call plug#begin()
    Plug 'nvim-lua/plenary.nvim'
    Plug 'CopilotC-Nvim/CopilotChat.nvim'
    call plug#end()
    
    lua << EOF
    require("CopilotChat").setup()
    EOF
<


==============================================================================
2. Core Concepts                                   *CopilotChat-core-concepts*

- **Resources** (`#<name>`) - Add specific content (files, git diffs, URLs) to your prompt
- **Tools** (`@<name>`) - Give LLM access to functions it can call with your approval
- **Sticky Prompts** (`> <text>`) - Persist context across single chat session
- **Models** (`$<model>`) - Specify which AI model to use for the chat
- **Prompts** (`/PromptName`) - Use predefined prompt templates for common tasks


EXAMPLES                                                *CopilotChat-examples*

>markdown
    # Add specific file to context
    
    #file:src/main.lua
    
    # Give LLM access to workspace tools
    
    @copilot What files are in this project?
    
    # Sticky prompt that persists
    
    > #buffer:current
    > You are a helpful coding assistant
<

When you use `@copilot`, the LLM can call functions like `glob`, `file`,
`gitdiff` etc. You‚Äôll see the proposed function call and can approve/reject
it before execution.


==============================================================================
3. Usage                                                   *CopilotChat-usage*


COMMANDS                                                *CopilotChat-commands*

  Command                    Description
  -------------------------- -------------------------------
  :CopilotChat <input>?      Open chat with optional input
  :CopilotChatOpen           Open chat window
  :CopilotChatClose          Close chat window
  :CopilotChatToggle         Toggle chat window
  :CopilotChatStop           Stop current output
  :CopilotChatReset          Reset chat window
  :CopilotChatSave <name>?   Save chat history
  :CopilotChatLoad <name>?   Load chat history
  :CopilotChatPrompts        View/select prompt templates
  :CopilotChatModels         View/select available models
  :CopilotChat<PromptName>   Use specific prompt template

CHAT KEY MAPPINGS                              *CopilotChat-chat-key-mappings*

  Insert   Normal   Action
  -------- -------- --------------------------------------------
  <Tab>    -        Trigger/accept completion menu for tokens
  <C-c>    q        Close the chat window
  <C-l>    <C-l>    Reset and clear the chat window
  <C-s>    <CR>     Submit the current prompt
  -        grr      Toggle sticky prompt for line under cursor
  -        grx      Clear all sticky prompts in prompt
  <C-y>    <C-y>    Accept nearest diff
  -        gj       Jump to section of nearest diff
  -        gqa      Add all answers from chat to quickfix list
  -        gqd      Add all diffs from chat to quickfix list
  -        gy       Yank nearest diff to register
  -        gd       Show diff between source and nearest diff
  -        gc       Show info about current chat
  -        gh       Show help message

  [!WARNING] Some plugins (e.g.¬†`copilot.vim`) may also map common keys like
  `<Tab>` in insert mode. To avoid conflicts, disable Copilot‚Äôs default `<Tab>`
  mapping with:
  >lua
      vim.g.copilot_no_tab_map = true
      vim.keymap.set('i', '<S-Tab>', 'copilot#Accept("\\<S-Tab>")', { expr = true, replace_keycodes = false })
  <
  You can also customize CopilotChat keymaps in your config.

PREDEFINED FUNCTIONS                        *CopilotChat-predefined-functions*

All predefined functions belong to the `copilot` group.

  ------------------------------------------------------------------------------
  Function      Description                               Example Usage
  ------------- ----------------------------------------- ----------------------
  buffer        Retrieves content from a specific buffer  #buffer

  buffers       Fetches content from multiple buffers     #buffers:visible

  diagnostics   Collects code diagnostics (errors,        #diagnostics:current
                warnings)                                 

  file          Reads content from a specified file path  #file:path/to/file

  gitdiff       Retrieves git diff information            #gitdiff:staged

  gitstatus     Retrieves git status information          #gitstatus

  glob          Lists filenames matching a pattern in     #glob:**/*.lua
                workspace                                 

  grep          Searches for a pattern across files in    #grep:TODO
                workspace                                 

  quickfix      Includes content of files in quickfix     #quickfix
                list                                      

  register      Provides access to specified Vim register #register:+

  selection     Includes the current visual selection     #selection

  url           Fetches content from a specified URL      #url:https://...
  ------------------------------------------------------------------------------

PREDEFINED PROMPTS                            *CopilotChat-predefined-prompts*

  -------------------------------------------------------------------------
  Prompt     Description
  ---------- --------------------------------------------------------------
  Explain    Write detailed explanation of selected code as paragraphs

  Review     Comprehensive code review with line-specific issue reporting

  Fix        Identify problems and rewrite code with fixes and explanation

  Optimize   Improve performance and readability with optimization strategy

  Docs       Add documentation comments to selected code

  Tests      Generate tests for selected code

  Commit     Generate commit message with commitizen convention from staged
             changes
  -------------------------------------------------------------------------

==============================================================================
4. Configuration                                   *CopilotChat-configuration*

For all available configuration options, see `lua/CopilotChat/config.lua`
<lua/CopilotChat/config.lua>.


QUICK SETUP                                          *CopilotChat-quick-setup*

Most users only need to configure a few options:

>lua
    {
      model = 'gpt-4.1',           -- AI model to use
      temperature = 0.1,           -- Lower = focused, higher = creative
      window = {
        layout = 'vertical',       -- 'vertical', 'horizontal', 'float'
        width = 0.5,              -- 50% of screen width
      },
      auto_insert_mode = true,     -- Enter insert mode when opening
    }
<


WINDOW & APPEARANCE                          *CopilotChat-window-&-appearance*

>lua
    {
      window = {
        layout = 'float',
        width = 80, -- Fixed width in columns
        height = 20, -- Fixed height in rows
        border = 'rounded', -- 'single', 'double', 'rounded', 'solid'
        title = 'ü§ñ AI Assistant',
        zindex = 100, -- Ensure window stays on top
      },
    
      headers = {
        user = 'üë§ You',
        assistant = 'ü§ñ Copilot',
        tool = 'üîß Tool',
      },
    
      separator = '‚îÅ‚îÅ',
      auto_fold = true, -- Automatically folds non-assistant messages
    }
<


BUFFER BEHAVIOR                                  *CopilotChat-buffer-behavior*

>lua
    -- Auto-command to customize chat buffer behavior
    vim.api.nvim_create_autocmd('BufEnter', {
      pattern = 'copilot-*',
      callback = function()
        vim.opt_local.relativenumber = false
        vim.opt_local.number = false
        vim.opt_local.conceallevel = 0
      end,
    })
<


HIGHLIGHTS                                            *CopilotChat-highlights*

You can customize colors by setting highlight groups in your config:

>lua
    -- In your colorscheme or init.lua
    vim.api.nvim_set_hl(0, 'CopilotChatHeader', { fg = '#7C3AED', bold = true })
    vim.api.nvim_set_hl(0, 'CopilotChatSeparator', { fg = '#374151' })
<

Types of copilot highlights:

- `CopilotChatHeader` - Header highlight in chat buffer
- `CopilotChatSeparator` - Separator highlight in chat buffer
- `CopilotChatSelection` - Selection highlight in source buffer
- `CopilotChatStatus` - Status and spinner in chat buffer
- `CopilotChatHelp` - Help text in chat buffer
- `CopilotChatResource` - Resource highlight in chat buffer (e.g.¬†`#file`, `#gitdiff`)
- `CopilotChatTool` - Tool call highlight in chat buffer (e.g.¬†`@copilot`)
- `CopilotChatPrompt` - Prompt highlight in chat buffer (e.g.¬†`/Explain`, `/Review`)
- `CopilotChatModel` - Model highlight in chat buffer (e.g.¬†`$gpt-4.1`)
- `CopilotChatUri` - URI highlight in chat buffer (e.g.¬†`##https://...`)
- `CopilotChatAnnotation` - Annotation highlight in chat buffer (file headers, tool call headers, tool call body)


PROMPTS                                                  *CopilotChat-prompts*

Define your own prompts in the configuration:

>lua
    {
      prompts = {
        MyCustomPrompt = {
          prompt = 'Explain how it works.',
          system_prompt = 'You are very good at explaining stuff',
          mapping = '<leader>ccmc',
          description = 'My custom prompt description',
        },
        Yarrr = {
          system_prompt = 'You are fascinated by pirates, so please respond in pirate speak.',
        },
        NiceInstructions = {
          system_prompt = 'You are a nice coding tutor, so please respond in a friendly and helpful manner.',
        }
      }
    }
<


FUNCTIONS                                              *CopilotChat-functions*

Define your own functions in the configuration with input handling and schema:

>lua
    {
      functions = {
        birthday = {
          description = "Retrieves birthday information for a person",
          uri = "birthday://{name}",
          schema = {
            type = 'object',
            required = { 'name' },
            properties = {
              name = {
                type = 'string',
                enum = { 'Alice', 'Bob', 'Charlie' },
                description = "Person's name",
              },
            },
          },
          resolve = function(input)
            return {
              {
                uri = 'birthday://' .. input.name,
                mimetype = 'text/plain',
                data = input.name .. ' birthday info',
              }
            }
          end
        }
      }
    }
<


PROVIDERS                                              *CopilotChat-providers*

Add custom AI providers:

>lua
    {
      providers = {
        my_provider = {
          get_url = function(opts) return "https://api.example.com/chat" end,
          get_headers = function() return { ["Authorization"] = "Bearer " .. api_key } end,
          get_models = function() return { { id = "gpt-4.1", name = "GPT-4.1 model" } } end,
          prepare_input = require('CopilotChat.config.providers').copilot.prepare_input,
          prepare_output = require('CopilotChat.config.providers').copilot.prepare_output,
        }
      }
    }
<

**Provider Interface:**

>lua
    {
      -- Optional: Disable provider
      disabled?: boolean,
    
      -- Optional: Extra info about the provider displayed in info panel
      get_info?(): string[]
    
      -- Optional: Get extra request headers with optional expiration time
      get_headers?(): table<string,string>, number?,
    
      -- Optional: Get API endpoint URL
      get_url?(opts: CopilotChat.Provider.options): string,
    
      -- Optional: Prepare request input
      prepare_input?(inputs: table<CopilotChat.Provider.input>, opts: CopilotChat.Provider.options): table,
    
      -- Optional: Prepare response output
      prepare_output?(output: table, opts: CopilotChat.Provider.options): CopilotChat.Provider.output,
    
      -- Optional: Get available models
      get_models?(headers: table): table<CopilotChat.Provider.model>,
    }
<

**Built-in providers:**

- `copilot` - GitHub Copilot (default)
- `github_models` - GitHub Marketplace models (disabled by default)


==============================================================================
5. API Reference                                   *CopilotChat-api-reference*


CORE                                                        *CopilotChat-core*

>lua
    local chat = require("CopilotChat")
    
    -- Basic Chat Functions
    chat.ask(prompt, config)      -- Ask a question with optional config
    chat.response()               -- Get the last response text
    chat.resolve_prompt()         -- Resolve prompt references
    chat.resolve_functions()      -- Resolve functions that are available for automatic use by LLM (WARN: async, requires plenary.async.run)
    chat.resolve_model()          -- Resolve model from prompt (WARN: async, requires plenary.async.run)
    
    -- Window Management
    chat.open(config)             -- Open chat window with optional config
    chat.close()                  -- Close chat window
    chat.toggle(config)           -- Toggle chat window visibility with optional config
    chat.reset()                  -- Reset the chat
    chat.stop()                   -- Stop current output
    
    -- Source Management
    chat.get_source()             -- Get the current source buffer and window
    chat.set_source(winnr)        -- Set the source window
    
    -- Prompt & Model Management
    chat.select_prompt(config)    -- Open prompt selector with optional config
    chat.select_model()           -- Open model selector
    
    -- History Management
    chat.load(name, history_path) -- Load chat history
    chat.save(name, history_path) -- Save chat history
    
    -- Configuration
    chat.setup(config)            -- Update configuration
    chat.log_level(level)         -- Set log level (debug, info, etc.)
<


CHAT WINDOW                                          *CopilotChat-chat-window*

You can also access the chat window UI methods through the `chat.chat` object:

>lua
    local window = require("CopilotChat").chat
    
    -- Chat UI State
    window:visible()             -- Check if chat window is visible
    window:focused()             -- Check if chat window is focused
    
    -- Message Management
    window:get_message(role, cursor)               -- Get chat message by role, either last or closest to cursor
    window:add_message({ role, content }, replace) -- Add or replace a message in chat
    window:remove_message(role, cursor)            -- Remove chat message by role, either last or closest to cursor
    window:get_block(role, cursor)                 -- Get code block by role, either last or closest to cursor
    window:add_sticky(sticky)                      -- Add sticky prompt to chat message
    
    -- Content Management
    window:append(text)          -- Append text to chat window
    window:clear()               -- Clear chat window content
    window:start()               -- Start writing to chat window
    window:finish()              -- Finish writing to chat window
    
    -- Navigation
    window:follow()              -- Move cursor to end of chat content
    window:focus()               -- Focus the chat window
    
    -- Advanced Features
    window:overlay(opts)         -- Show overlay with specified options
<


EXAMPLE USAGE                                      *CopilotChat-example-usage*

>lua
    -- Open chat, ask a question and handle response
    require("CopilotChat").open()
    require("CopilotChat").ask("#buffer Explain this code", {
      callback = function(response)
        vim.notify("Got response: " .. response:sub(1, 50) .. "...")
        return response
      end,
    })
    
    -- Save and load chat history
    require("CopilotChat").save("my_debugging_session")
    require("CopilotChat").load("my_debugging_session")
    
    -- Use custom sticky and model
    require("CopilotChat").ask("How can I optimize this?", {
      model = "gpt-4.1",
      sticky = {"#buffer", "#gitdiff:staged"}
    })
<

For more examples, see the examples wiki page
<https://github.com/CopilotC-Nvim/CopilotChat.nvim/wiki/Examples-and-Tips>.


==============================================================================
6. Development                                       *CopilotChat-development*


SETUP                                                      *CopilotChat-setup*

To set up the environment:

1. Clone the repository:

>bash
    git clone https://github.com/CopilotC-Nvim/CopilotChat.nvim
    cd CopilotChat.nvim
<

1. Install development dependencies:

>bash
    make install-pre-commit
<

To run tests:

>bash
    make test
<


CONTRIBUTING                                        *CopilotChat-contributing*

1. Fork the repository
2. Create your feature branch
3. Make your changes
4. Run tests and lint checks
5. Submit a pull request

See CONTRIBUTING.md </CONTRIBUTING.md> for detailed guidelines.


==============================================================================
7. Contributors                                     *CopilotChat-contributors*

Thanks goes to these wonderful people (emoji key
<https://allcontributors.org/docs/en/emoji-key>):

gptlangüíª üìñDung Duc Huynh (Kaka)üíª üìñAhmed HaracicüíªTr√≠ Thi·ªán Nguy·ªÖnüíªHe ZhizhouüíªGuruprakash RajakkannuüíªkristofkaüíªPostCyberPunküìñKatsuhiko NishimraüíªErno HopearuohoüíªShaun GarwoodüíªneutrinoA4üíª üìñJack MuratoreüíªAdriel Velazquezüíª üìñTomas Slusnyüíª üìñNisalüìñTobias G√•rdhusüìñPetr Dlouh√ΩüìñDylan MadisettiüíªAaron Weisbergüíª üìñJose Tlacuiloüíª üìñKevin Traverüíª üìñdTryüíªArata FurukawaüíªLingüíªIvan FrolovüíªFolke Lemaitreüíª üìñGitMurfüíªDmitrii LipinüíªjinzhongjiaüìñguillüíªSjon-Paul BrownüíªRenzo Mondrag√≥nüíª üìñfjchen7üíªRados≈Çaw Wo≈∫niaküíªJakubPecenkaüíªthomastthaiüìñTom√°≈° Janou≈°eküíªToddneal StallworthüìñSergey AlexandrovüíªL√©opold MebazaaüíªJunKi JinüíªabdennourzahafüìñJosiahüíªTony Fischerüíª üìñKohei WadaüíªSebastian YaghoubiüìñjohncmingüíªRokas Brazd≈æionisüíªSolaüìñ üíªMani ChandraüíªNischal BasutiüìñTeo LjungbergüíªJoe PriceüíªYufan Youüìñ üíªManish KumarüíªAnton ≈Ωdanovüìñ üíªFredrik AverpilüíªAaron D BordenüíªMd. Iftakhar Awal Chowdhuryüíª üìñDanilo HortaüíªMihamina Rakotomandimbyüìñ üíªAjmal SüíªSamiul IslamüíªThis project follows the all-contributors
<https://github.com/all-contributors/all-contributors> specification.
Contributions of any kind are welcome!


==============================================================================
8. Stargazers                                         *CopilotChat-stargazers*

<https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim>

==============================================================================
9. Links                                                   *CopilotChat-links*

1. *Stargazers over time*: https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim.svg?variant=adaptive

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
