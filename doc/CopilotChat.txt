*CopilotChat.txt*         For NVIM v0.8.0        Last change: 2024 February 27

==============================================================================
Table of Contents                              *CopilotChat-table-of-contents*

1. Copilot Chat for Neovim               |CopilotChat-copilot-chat-for-neovim|
  - Prerequisites          |CopilotChat-copilot-chat-for-neovim-prerequisites|
  - Authentication        |CopilotChat-copilot-chat-for-neovim-authentication|
  - Installation            |CopilotChat-copilot-chat-for-neovim-installation|
  - Usage                          |CopilotChat-copilot-chat-for-neovim-usage|
  - Tips                            |CopilotChat-copilot-chat-for-neovim-tips|
  - Roadmap (Wishlist)|CopilotChat-copilot-chat-for-neovim-roadmap-(wishlist)|
  - Development              |CopilotChat-copilot-chat-for-neovim-development|
  - Contributors ✨    |CopilotChat-copilot-chat-for-neovim-contributors-✨|

==============================================================================
1. Copilot Chat for Neovim               *CopilotChat-copilot-chat-for-neovim*

<https://copilotc-nvim.github.io/CopilotChat.nvim/>
<https://results.pre-commit.ci/latest/github/CopilotC-Nvim/CopilotChat.nvim/main>

|CopilotChat-|
  [!NOTE]
  Plugin was rewritten to Lua from Python. Please check the [migration guide from version 1 to version 2](/MIGRATION.md) for more information.

  [!NOTE] A new command, `CopilotChatBuffer` has been added. It allows you to
  chat with Copilot using the entire content of the buffer.

  [!NOTE] A new command, `CopilotChatInPlace` has been introduced. It functions
  like the ChatGPT plugin. Please run ":UpdateRemotePlugins" command and restart
  Neovim before starting a chat with Copilot. To stay updated on our roadmap,
  please join our Discord <https://discord.gg/vy6hJsTWaZ> community.

PREREQUISITES              *CopilotChat-copilot-chat-for-neovim-prerequisites*

Ensure you have the following installed:

- **Neovim stable (0.9.5) or nightly**.

Optional:

- tiktoken_core: `sudo luarocks install --lua-version 5.1 tiktoken_core`. Alternatively, download a pre-built binary from [lua-tiktoken releases](https://github.com/gptlang/lua-tiktoken/releases)
- You can check your Lua PATH in Neovim by doing `:lua print(package.cpath)`. Save the binary as `tiktoken_core.so` in any of the given paths.


AUTHENTICATION            *CopilotChat-copilot-chat-for-neovim-authentication*

It will prompt you with instructions on your first start. If you already have
`Copilot.vim` or `Copilot.lua`, it will work automatically.


INSTALLATION                *CopilotChat-copilot-chat-for-neovim-installation*


LAZY.NVIM ~

1.Put it in your lazy setup
>lua
    return {
      {
	"CopilotC-Nvim/CopilotChat.nvim",
	branch = "canary",
	dependencies = {
	  { "zbirenbaum/copilot.lua" }, -- or github/copilot.vim
	  { "nvim-lua/plenary.nvim" }, -- for curl, log wrapper
	},
	opts = {
	  debug = true, -- Enable debugging
	  -- See Configuration section for rest
	},
	-- See Commands section for default commands if you want to lazy load on them
      },
      event = "VeryLazy", 
      keys = {
      -- Show help actions with telescope
	{
	  "<leader>cch",
	  function()
	    local actions = require("CopilotChat.actions")
	    require("CopilotChat.integrations.telescope").pick(actions.help_actions())
	  end,
	  desc = "CopilotChat - Help actions",
	},
	-- Show prompts actions with telescope
	{
	  "<leader>ccp",
	  function()
	    local actions = require("CopilotChat.actions")
	    require("CopilotChat.integrations.telescope").pick(actions.prompt_actions())
	  end,
	  desc = "CopilotChat - Prompt actions",
	},
	{
	  "<leader>ccp",
	  ":lua require('CopilotChat.integrations.telescope').pick(require('CopilotChat.actions').prompt_actions())<CR>",
	  mode = "x",
	  desc = "CopilotChat - Prompt actions",
	},
	-- Code related commands
	{ "<leader>cce", "<cmd>CopilotChatExplain<cr>",       desc = "CopilotChat - Explain code" },
	{ "<leader>cct", "<cmd>CopilotChatTests<cr>",         desc = "CopilotChat - Generate tests" },
	{ "<leader>ccr", "<cmd>CopilotChatReview<cr>",        desc = "CopilotChat - Review code" },
	{ "<leader>ccR", "<cmd>CopilotChatRefactor<cr>",      desc = "CopilotChat - Refactor code" },
	{ "<leader>ccn", "<cmd>CopilotChatBetterNamings<cr>", desc = "CopilotChat - Better Naming" },
	-- Chat with Copilot in visual mode
	{
	  "<leader>ccv",
	  ":CopilotChatVisual",
	  mode = "x",
	  desc = "CopilotChat - Open in vertical split",
	},
	{
	  "<leader>ccx",
	  ":CopilotChatInline<cr>",
	  mode = "x",
	  desc = "CopilotChat - Inline chat",
	},
	-- Custom input for CopilotChat
	{
	  "<leader>cci",
	  function()
	    local input = vim.fn.input("Ask Copilot: ")
	    if input ~= "" then
	      vim.cmd("CopilotChat " .. input)
	    end
	  end,
	  desc = "CopilotChat - Ask input",
	},
	-- Generate commit message based on the git diff
	{
	  "<leader>ccm",
	  "<cmd>CopilotChatCommit<cr>",
	  desc = "CopilotChat - Generate commit message for all changes",
	},
	{
	  "<leader>ccM",
	  "<cmd>CopilotChatCommitStaged<cr>",
	  desc = "CopilotChat - Generate commit message for staged changes",
	},
	-- Quick chat with Copilot
	{
	  "<leader>ccq",
	  function()
	    local input = vim.fn.input("Quick Chat: ")
	    if input ~= "" then
	      vim.cmd("CopilotChatBuffer " .. input)
	    end
	  end,
	  desc = "CopilotChat - Quick chat",
	},
	-- Debug
	{ "<leader>ccd", "<cmd>CopilotChatDebugInfo<cr>",     desc = "CopilotChat - Debug Info" },
	-- Fix the issue with diagnostic
	{ "<leader>ccf", "<cmd>CopilotChatFixDiagnostic<cr>", desc = "CopilotChat - Fix Diagnostic" },
	-- Clear buffer and chat history
	{ "<leader>ccl", "<cmd>CopilotChatReset<cr>",         desc = "CopilotChat - Clear buffer and chat history" },
	-- Toggle Copilot Chat Vsplit
	{ "<leader>ccv", "<cmd>CopilotChatToggle<cr>",        desc = "CopilotChat - Toggle Vsplit" },
      },
    }
<

2. Restart `neovim`


VIM-PLUG ~

Similar to the lazy setup, you can use the following configuration:

>lua
    Plug 'CopilotC-Nvim/CopilotChat.nvim'
    call plug#end()
    
    local copilot_chat = require("CopilotChat")
    copilot_chat.setup({
      debug = true,
      show_help = "yes",
      prompts = {
        Explain = "Explain how it works by Japanese language.",
        Review = "Review the following code and provide concise suggestions.",
        Tests = "Briefly explain how the selected code works, then generate unit tests.",
        Refactor = "Refactor the code to improve clarity and readability.",
      },
      build = function()
        vim.notify("Please update the remote plugins by running ':UpdateRemotePlugins', then restart Neovim.")
      end,
      event = "VeryLazy",
    })
    
    nnoremap <leader>ccb <cmd>CopilotChatBuffer<cr>
    nnoremap <leader>cce <cmd>CopilotChatExplain<cr>
    nnoremap <leader>cct <cmd>CopilotChatTests<cr>
    xnoremap <leader>ccv :CopilotChatVisual<cr>
    xnoremap <leader>ccx :CopilotChatInPlace<cr>
<

Credit to @treyhunner and @nekowasabi for the configuration
<https://github.com/CopilotC-Nvim/CopilotChat.nvim/discussions/46>.


MANUAL ~

1. Put the files in the right place

>bash
  mkdir -p ~/.config/nvim/pack/copilotchat/start
  cd ~/.config/nvim/pack/copilotchat/start

  git clone https://github.com/zbirenbaum/copilot.lua
  git clone https://github.com/nvim-lua/plenary.nvim

  git clone -b canary https://github.com/CopilotC-Nvim/CopilotChat.nvim
>

2. Add to your configuration (e.g. `~/.config/nvim/init.lua`)

>lua
  require("CopilotChat").setup {
    debug = true, -- Enable debugging
    -- See Configuration section for rest
  }
<

3. Restart `neovim`

USAGE                              *CopilotChat-copilot-chat-for-neovim-usage*


COMMANDS ~

CHAT WITH GITHUB COPILOT ~

1. Copy some code into the unnamed register using the `y` command.
2. Run the command `:CopilotChat` followed by your question. For example, `:CopilotChat What does this code do?`


CODE EXPLANATION ~

1. Copy some code into the unnamed register using the `y` command.
2. Run the command `:CopilotChatExplain`.


GENERATE TESTS ~

1. Copy some code into the unnamed register using the `y` command.
2. Run the command `:CopilotChatTests`.

<https://gyazo.com/f285467d4b8d8f8fd36aa777305312ae>


TROUBLESHOOT AND FIX DIAGNOSTIC ~

1. Place your cursor on the line with the diagnostic message.
2. Run the command `:CopilotChatFixDiagnostic`.

<https://gyazo.com/4aff3fdbc5c3eee59cb68939546fa2be>


TOKEN COUNT & FOLD WITH VISUAL MODE ~

1. Select some code using visual mode.
2. Run the command `:CopilotChatVisual` with your question.

<https://gyazo.com/766fb3b6ffeb697e650fc839882822a8>


IN-PLACE CHAT POPUP ~

1. Select some code using visual mode.
2. Run the command `:CopilotChatInPlace` and type your prompt. For example, `What does this code do?`
3. Press `Enter` to send your question to Github Copilot.
4. Press `q` to quit. There is help text at the bottom of the screen. You can also press `?` to toggle the help text.

<https://gyazo.com/4a5badaa109cd483c1fc23d296325cb0>


TOGGLE VERTICAL SPLIT WITH :COPILOTCHATVSPLITTOGGLE ~

<https://gyazo.com/db5af9e5d88cd2fd09f58968914fa521>


CHAT WITH COPILOT WITH ALL CONTENTS OF INFOCUS BUFFER ~

1. Run the command `:CopilotChatBuffer` and type your prompt. For example, `What does this code do?`
2. Press `Enter` to send your question to Github Copilot.
3. Copilot will pull the content of the infocus buffer and chat with you.

CONFIGURATION ~

You have the ability to tailor this plugin to your specific needs using the
configuration options outlined below:

>lua
  {
    system_prompt = prompts.COPILOT_INSTRUCTIONS, -- System prompt to use
    model = 'gpt-4', -- GPT model to use
    temperature = 0.1, -- GPT temperature
    context = 'manual', -- Context to use, 'buffers', 'buffer' or 'manual'
    proxy = nil, -- [protocol://]host[:port] Use this proxy
    allow_insecure = false, -- Allow insecure server connections
    debug = false, -- Enable debug logging
    show_folds = true, -- Shows folds for sections in chat
    show_help = true, -- Shows help message as virtual lines when waiting for user input
    clear_chat_on_new_prompt = false, -- Clears chat on every new prompt
    auto_follow_cursor = true, -- Auto-follow cursor in chat
    name = 'CopilotChat', -- Name to use in chat
    separator = '---', -- Separator to use in chat
    history_path = vim.fn.stdpath('data') .. '/copilotchat_history', -- Default path to stored history
    callback = nil, -- Callback to use when ask response is received
    -- default prompts
    prompts = {
      Explain = {
	prompt = '/COPILOT_EXPLAIN Write an explanation for the code above as paragraphs of text.',
      },
      Tests = {
	prompt = '/COPILOT_TESTS Write a set of detailed unit test functions for the code above.',
      },
      Fix = {
	prompt = '/COPILOT_FIX There is a problem in this code. Rewrite the code to show it with the bug fixed.',
      },
      Optimize = {
	prompt = '/COPILOT_REFACTOR Optimize the selected code to improve performance and readablilty.',
      },
      Docs = {
	prompt = '/COPILOT_REFACTOR Write documentation for the selected code. The reply should be a codeblock containing the original code with the documentation added as comments. Use the most appropriate documentation style for the programming language used (e.g. JSDoc for JavaScript, docstrings for Python etc.',
      },
      FixDiagnostic = {
	prompt = 'Please assist with the following diagnostic issue in file:',
	selection = select.diagnostics,
      },
      Commit = {
	prompt = 'Write commit message for the change with commitizen convention. Make sure the title has maximum 50 characters and message is wrapped at 72 characters. Wrap the whole message in code block with language gitcommit.',
	selection = select.gitdiff,
      },
      CommitStaged = {
	prompt = 'Write commit message for the change with commitizen convention. Make sure the title has maximum 50 characters and message is wrapped at 72 characters. Wrap the whole message in code block with language gitcommit.',
	selection = function(source)
	  return select.gitdiff(source, true)
	end,
      },
    },
    -- default selection (visual or line)
    selection = function(source)
      return select.visual(source) or select.line(source)
    end,
    -- default window options
    window = {
      layout = 'vertical', -- 'vertical', 'horizontal', 'float'
      -- Options below only apply to floating windows
      relative = 'editor', -- 'editor', 'win', 'cursor', 'mouse'
      border = 'single', -- 'none', single', 'double', 'rounded', 'solid', 'shadow'
      width = 0.8, -- fractional width of parent
      height = 0.6, -- fractional height of parent
      row = nil, -- row position of the window, default is centered
      col = nil, -- column position of the window, default is centered
      title = 'Copilot Chat', -- title of chat window
      footer = nil, -- footer of chat window
      zindex = 1, -- determines if window is on top or below other floating windows
    },
    -- default mappings
    mappings = {
      close = 'q',
      reset = '<C-l>',
      complete = '<Tab>',
      submit_prompt = '<CR>',
      accept_diff = '<C-y>',
      show_diff = 'gd',
      show_system_prompt = 'gp',
      show_user_selection = 'gs',
    },
  }
<
DEFINING A PROMPT WITH COMMAND AND KEYMAP ~

This will define prompt that you can reference with `/MyCustomPrompt` in chat, call with `:CopilotChatMyCustomPrompt` or use the keymap `<leader>ccmc`.
It will use visual selection as default selection. If you are using `lazy.nvim` and are already lazy loading based on `Commands` make sure to include the prompt
commands and keymaps in `cmd` and `keys` respectively.

>lua
  {
    prompts = {
      MyCustomPrompt = {
	prompt = 'Explain how it works.',
	mapping = '<leader>ccmc',
	description = 'My custom prompt description',
	selection = require('CopilotChat.select').visual,
      },
    },
  }
<

REFERENCING SYSTEM OR USER PROMPTS ~

You can reference system or user prompts in your configuration or in chat with `/PROMPT_NAME` slash notation.
For collection of default `COPILOT_` (system) and `USER_` (user) prompts, see [here](/lua/CopilotChat/prompts.lua).

>lua
  {
    prompts = {
      MyCustomPrompt = {
	prompt = '/COPILOT_EXPLAIN Explain how it works.',
      },
      MyCustomPrompt2 = {
	prompt = '/MyCustomPrompt Include some additional context.',
      },
    },
  }
<

CUSTOM SYSTEM PROMPTS ~

You can define custom system prompts by using `system_prompt` property when passing config around.

>lua
  {
    system_prompt = 'Your name is Github Copilot and you are a AI assistant for developers.',
    prompts = {
      MyCustomPromptWithCustomSystemPrompt = {
	system_prompt = 'Your name is Johny Microsoft and you are not an AI assistant for developers.',
	prompt = 'Explain how it works.',
      },
    },
  }
<


TIPS                                *CopilotChat-copilot-chat-for-neovim-tips*


QUICK CHAT WITH YOUR BUFFER ~

To chat with Copilot using the entire content of the buffer, you can add the following configuration to your keymap:

>lua
  -- lazy.nvim keys

    -- Quick chat with Copilot
    {
      "<leader>ccq",
      function()
	local input = vim.fn.input("Quick Chat: ")
	if input ~= "" then
	  require("CopilotChat").ask(input, { selection = require("CopilotChat.select").buffer })
	end
      end,
      desc = "CopilotChat - Quick chat",
    }
<

INLINE CHAT WITH COPILOT ~

Change the window layout to `float` and position relative to cursor to make the window look like inline chat.
This will allow you to chat with Copilot without opening a new window.

>lua
  -- lazy.nvim opts

    {
      window = {
	layout = 'float',
	relative = 'cursor',
	width = 1,
	height = 0.4,
	row = 1
      }
    }
<

INTEGRATION WITH TELESCOPE.NVIM ~


Requires [telescope.nvim](https://github.com/nvim-telescope/telescope.nvim) plugin to be installed.


>lua
  -- lazy.nvim keys

    -- Show help actions with telescope
    {
      "<leader>cch",
      function()
	local actions = require("CopilotChat.actions")
	require("CopilotChat.integrations.telescope").pick(actions.help_actions())
      end,
      desc = "CopilotChat - Help actions",
    },
    -- Show prompts actions with telescope
    {
      "<leader>ccp",
      function()
	local actions = require("CopilotChat.actions")
	require("CopilotChat.integrations.telescope").pick(actions.prompt_actions())
      end,
      desc = "CopilotChat - Prompt actions",
    },
<

INTEGRATION WITH FZF-LUA ~

Requires [fzf-lua](https://github.com/ibhagwan/fzf-lua) plugin to be installed.

>lua
  -- lazy.nvim keys

    -- Show help actions with fzf-lua
    {
      "<leader>cch",
      function()
	local actions = require("CopilotChat.actions")
	require("CopilotChat.integrations.fzflua").pick(actions.help_actions())
      end,
      desc = "CopilotChat - Help actions",
    },
    -- Show prompts actions with fzf-lua
    {
      "<leader>ccp",
      function()
	local actions = require("CopilotChat.actions")
	require("CopilotChat.integrations.fzflua").pick(actions.prompt_actions())
      end,
      desc = "CopilotChat - Prompt actions",
    },
<

DEBUGGING WITH :MESSAGES AND :COPILOTCHATDEBUGINFO ~

If you encounter any issues, you can run the command `:messages` to inspect the
log. You can also run the command `:CopilotChatDebugInfo` to inspect the debug
information.

<https://gyazo.com/bf00e700bcee1b77bcbf7b516b552521>




ROADMAP (WISHLIST)    *CopilotChat-copilot-chat-for-neovim-roadmap-(wishlist)*

- Use vector encodings to automatically select code
- Treesitter integration for function definitions
- General QOL improvements


DEVELOPMENT                  *CopilotChat-copilot-chat-for-neovim-development*


INSTALLING PRE-COMMIT TOOL ~

For development, you can use the provided Makefile command to install the
pre-commit tool:

>bash
    make install-pre-commit
<

This will install the pre-commit tool and the pre-commit hooks.


CONTRIBUTORS ✨        *CopilotChat-copilot-chat-for-neovim-contributors-✨*

Thanks goes to these wonderful people (emoji key
<https://allcontributors.org/docs/en/emoji-key>):

gptlang💻 📖Dung Duc Huynh (Kaka)💻 📖Ahmed Haracic💻Trí Thiện Nguyễn💻He Zhizhou💻Guruprakash Rajakkannu💻kristofka💻PostCyberPunk📖Katsuhiko Nishimra💻Erno Hopearuoho💻Shaun Garwood💻neutrinoA4💻 📖Jack Muratore💻Adriel Velazquez💻 📖Tomas Slusny💻 📖Nisal📖This project follows the all-contributors
<https://github.com/all-contributors/all-contributors> specification.
Contributions of any kind are welcome!


STARGAZERS OVER TIME ~

<https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim>

==============================================================================
2. Links                                                   *CopilotChat-links*

1. *Prerequisite*: https://img.shields.io/badge/python-%3E%3D3.10-blue.svg
2. *Documentation*: https://img.shields.io/badge/documentation-yes-brightgreen.svg
3. *pre-commit.ci status*: https://results.pre-commit.ci/badge/github/CopilotC-Nvim/CopilotChat.nvim/main.svg
4. *All Contributors*: https://img.shields.io/badge/all_contributors-16-orange.svg?style=flat-square
5. *@treyhunner*: 
6. *@nekowasabi*: 
7. *@jellydn*: 
8. *Chat Demo*: https://i.gyazo.com/10fbd1543380d15551791c1a6dcbcd46.gif
9. *Explain Code Demo*: https://i.gyazo.com/e5031f402536a1a9d6c82b2c38d469e3.gif
10. *Generate tests*: https://i.gyazo.com/f285467d4b8d8f8fd36aa777305312ae.gif
11. *Fix diagnostic*: https://i.gyazo.com/4aff3fdbc5c3eee59cb68939546fa2be.gif
12. *Fold Demo*: https://i.gyazo.com/766fb3b6ffeb697e650fc839882822a8.gif
13. *In-place Demo*: https://i.gyazo.com/4a5badaa109cd483c1fc23d296325cb0.gif
14. *Toggle*: https://i.gyazo.com/db5af9e5d88cd2fd09f58968914fa521.gif
15. *Chat with buffer*: https://i.gyazo.com/9b8cbf1d78a19f326282a6520bc9aab0.gif
16. *Help action with Copilot Chat*: https://i.gyazo.com/146dc35368592ba9f5de047ddc4728ad.gif
17. *Select action base on user prompts*: https://i.gyazo.com/a9c41e6398591c2f1d1d872fd58a2c63.gif
18. *Layout*: https://i.gyazo.com/550daf6cbb729027ca9bd703c21af53e.png
19. *Debug Info*: https://i.gyazo.com/bf00e700bcee1b77bcbf7b516b552521.gif
20. *@ecosse3*: 
21. *Stargazers over time*: https://starchart.cc/CopilotC-Nvim/CopilotChat.nvim.svg

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
